Stored Cross-Site Scripting (XSS) in <field name>
Description:
The test team observed that the application is vulnerable to Stored XSS in the <field name> field.
Observation:
In the current scenario, it was observed that when a malicious XSS payload like <script>alert('XSS')</script> was submitted through the <field name> field, it got stored in the backend and executed automatically when the affected page was viewed
Risk Impact:
The attacker can execute malicious scripts in the context of another user’s browser session. This can be used to steal session cookies, perform unauthorized actions on behalf of the user, redirect to malicious sites, or deface content. If the affected user has elevated privileges, the attacker can compromise the entire application.

Severity: High
Recommendations:
It is recommended to:

Apply output encoding using context-aware encoding libraries like DOMPurify or OWASP Java Encoder when rendering user-generated content in the browser.

Implement strict input validation to reject unexpected HTML/script content in the <field name> field.

Sanitize and validate user input server-side and client-side to avoid execution of malicious scripts.

Use Content Security Policy (CSP) headers to reduce the chances of script execution even if XSS is present.

Implement the above recommendations across all areas where user input is stored and reflected back in the frontend.
OWASP Top 10 2021 Mapping: A03:2021 – Injection
CVSS 3.1 Score: 8.0 (High)
CVSS Vector: CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:H/A:N
CWE: CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
-------------------------------------------------------
Authorization Bypass via OTP Verification Tampering.
Description:
The test team observed that the application allows bypassing OTP verification when updating email ID or mobile number.

Observation:
In the current scenario, the test team observed that during the update of email or mobile number, the server accepts a manipulated response where the OTP verification status is forcibly changed to success. By doing this, an attacker was able to bind their account with the email and phone number of another user. After that, when logging in using the victim’s phone number or email, the application routed the session to the attacker’s account. As a result, the victim unknowingly gets logged into the attacker's profile and loses complete access to their original account and associated data.

Risk Impact:
The attacker can take over another user’s identity by hijacking the victim’s phone number and email bindings. This can lead to complete account takeover, identity theft, loss of access for the original user, and unauthorized access to sensitive personal data. This also permanently disrupts the victim’s ability to log into the application.
Severity: Critical
Recommendations:
It is recommended to:
Perform strict server-side OTP verification before allowing email or phone number changes.
Do not rely on client-side flags or responses for verifying OTP status; validation must occur entirely on the backend.
Maintain a temporary session state for OTP validation and only allow binding changes after the correct OTP has been verified from the backend.
Prevent identity overwriting by checking if the target email or phone number is already bound to an existing account and blocking the change with an error if so.
OWASP Top 10 2021 Mapping:
A01:2021 – Broken Access Control
CVSS 3.1 Score: 9.4 (Critical)
CVSS Vector: CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H
CWE:
CWE-306: Missing Authentication for Critical Function
------------------------------------
For CSV Inuection --> Copy the report.
----------------------------------
For Reflected XSS --> Copy Report
---------------------------------
Issue Name: Insecure Session Management.
Description:
The test team observed that the application fails to invalidate session tokens after logout.

Observation:
In the current scenario, the test team captured a valid request containing session authentication details and sent it to the repeater. After logging out from the application, the same old request was replayed. It was observed that the server still accepted it, and the intended action was performed successfully.
Risk Impact:
The attacker can continue to use a previously captured session to perform actions on the application, even after the user believes they have logged out. This can lead to unauthorized access, session hijacking, and persistent access to user resources without detection.
Recommendations:
It is recommended to:
Invalidate session tokens on the server side immediately after the user logs out.
Implement token revocation logic on logout endpoints to destroy session state server-side.
Reject any requests using session tokens that are no longer marked as active in the session store.
CWE: CWE-613: Insufficient Session Expiration
OWASP Top 10 2021 Mapping: A07:2021 – Identification and Authentication Failures
Copy CVSS from old rep.
--------------------------
Metadata exfil copy old report 
-----------------------------
Malicious File Upload --> Copy old Report
------------------------
OTP Flood Vulnerability
Description:
The test team observed that the application allows sending multiple OTPs to a user without any restrictions on the number of resends.

Observation:
In the current scenario, the test team triggered the OTP request repeatedly using the resend option. It was observed that OTPs were sent to the target user every time without any limit or restriction. This could be done arbitrarily many times, causing spam and potential denial of service to the target's SMS or email inbox.

Risk Impact:
The attacker can abuse this behavior to flood the victim's phone number or email with OTP messages. This can be used to harass users, deplete SMS quotas, or cause denial of service by overwhelming their device or inbox with continuous OTPs. In some cases, it can lead to financial cost implications for SMS services.

Severity: Medium
Recommendations:
It is recommended to:
Implement a maximum OTP resend count per verification session (e.g., no more than 3 resends per 5-minute window).
Introduce a minimum cooldown timer (e.g., 30–60 seconds) between consecutive OTP resend attempts.
Track OTP requests at the backend per user/session and block excessive or repeated resends beyond a safe threshold.
OWASP Top 10 2021 Mapping: A05:2021 – Security Misconfiguration
CVSS 3.1 Score: 5.3 (Medium)
CVSS Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L
CWE: CWE-770: Allocation of Resources Without Limits or Throttling
----------------------
Issue Name: No Rate Limiting Implemented
Description:
The test team observed that the application does not implement rate limiting on the compensation type creation feature.
Observation:
In the current scenario, the test team was able to send multiple requests to create compensation types in a very short span of time without any restriction. There was no control mechanism in place to limit the number of requests a user can make to this endpoint, allowing unlimited creation operations to be performed.
Risk Impact:
The attacker can abuse this functionality to flood the backend with excessive compensation type entries. This can lead to performance degradation, database bloating, potential denial of service, or resource exhaustion, which can affect other parts of the application relying on this data.
Severity: Medium
Recommendations:
It is recommended to:
Implement rate limiting on the endpoint responsible for creating compensation types (e.g., maximum X requests per minute per user or IP).
Apply server-side throttling logic based on API key, user ID, or IP address to detect and block abusive patterns.
Return appropriate error messages or HTTP status codes (like 429 Too Many Requests) when rate limits are exceeded.
Apply rate limiting to all endpoints that modify or create resources, including compensation types, forms, tasks, etc.
OWASP Top 10 2021 Mapping: A05:2021 – Security Misconfiguration
CVSS 3.1 Score: 5.3 (Medium)
CVSS Vector: CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:L
CWE: CWE-770: Allocation of Resources Without Limits or Throttling
---------------------------------
Issue Name: Cross-Site Request Forgery (CSRF) on Delegate Approval Creation
Description:
The test team observed that the application is vulnerable to Cross-Site Request Forgery (CSRF) in the delegate approval creation functionality.

Observation:
In the current scenario, the test team crafted a CSRF proof-of-concept (PoC) that triggered the delegate approval creation request from the malicious CSRF link. When a logged-in user visited the malicious URL, the crafted request was automatically executed without user interaction, and a delegate approval was successfully created. 
Risk Impact:
The attacker can trick an authenticated user into unknowingly performing unauthorized actions, such as creating delegate approvals or making configuration changes. This can lead to privilege abuse, business logic manipulation, and unauthorized delegation of access or responsibilities.
Severity: High
Recommendations:
It is recommended to:
Implement anti-CSRF tokens (synchronizer token pattern or double-submit cookie pattern) for all state-changing requests.
Validate CSRF tokens on the server-side for every request that modifies data or user state.
Use a secure SameSite attribute (SameSite=Lax or Strict) in authentication cookies to reduce the risk of CSRF.
Apply CSRF protection throughout the application, especially on all endpoints performing state-changing operations such as creation, update, and deletion of entities (e.g., delegate approvals, tasks, profile settings, etc.).
Disable or avoid using HTTP GET methods for state-changing operations — use POST, PUT, or DELETE with CSRF validation.
OWASP Top 10 2021 Mapping: A01:2021 – Broken Access Control
CVSS 3.1 Score: 7.1 (High)
CVSS Vector: CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:H/A:N
CWE: CWE-352: Cross-Site Request Forgery (CSRF)
----------------------------------------------------------------------
Improper Input Handling Potential SQli
Description:
The test team observed that the application exposes SQL backend error messages when specially crafted input is submitted in the associate search functionality.

Observation:
In the current scenario, the test team submitted time-based SQL payloads through the "Search by Associate ID" parameter in a POST request. The application responded with various HTTP status codes (200, 400, 404, and 500), with response bodies occasionally including detailed error messages. In particular, some responses contained developer debug messages and SQL exceptions such as:
java.sql.SQLException: ORA-20001:
ORA-06512: at line 1
SP_FILTER procedure errors
These responses indicate backend SQL exception traces were leaked, pointing to improper input handling. 
Risk Impact:
The attacker can use these backend SQL errors to infer database structure, stored procedure names, or specific SQL logic. This information can be used to craft more precise and dangerous SQL injection attacks. Even though no confirmed data extraction occurred in this instance, continued probing or automation could escalate the issue to a full SQL injection vulnerability.

Severity: Medium
Recommendations:
It is recommended to:
Implement strict server-side input validation and sanitization for all user-supplied inputs, particularly in search parameters and dynamic queries.
Use parameterized queries (prepared statements) instead of string concatenation to construct SQL queries.
Disable detailed SQL or Java exception messages in production environments. Display only generic error messages to users.
Apply the above recommendations throughout the application wherever user input is incorporated into SQL queries, including search, filters, dynamic reports, and administrative functions.
OWASP Top 10 2021 Mapping: A03:2021 – Injection
CVSS 3.1 Score: 6.4 (Medium)
CVSS Vector: CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N
CWE: CWE-209: Generation of Error Message Containing Sensitive Information
-----------------------------------------------------
Issue Name: Server Information Disclosure via HTTP Response Header
Description:
The test team observed that the application discloses server software information in HTTP response headers.
Observation:
In the current scenario, the test team analyzed the HTTP response headers and found that the Server header was set to openresty, revealing the underlying web server software used by the application. This disclosure provides attackers with specific software details that could be used for targeted exploits.
Risk Impact:
The attacker can identify the server software version and use this information to search for known vulnerabilities or default misconfigurations related to that technology.
Severity: Low
Recommendations:
It is recommended to:
Suppress or obfuscate the Server header in HTTP responses.
Configure the reverse proxy or web server (e.g., NGINX, Apache, OpenResty) to either remove or replace the Server header with a generic value.
OWASP Top 10 2021 Mapping: A05:2021 – Security Misconfiguration
CVSS 3.1 Score: 3.1 (Low)
CVSS Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:
CWE: CWE-200: Exposure of Sensitive Information to an Unauthorized Actor
-------------------------------------
Client-Side Validation Bypass
The test team observed that client-side input validation on special characters can be bypassed by intercepting and modifying HTTP requests.

Observation:
In the current scenario, the application implemented client-side validation to restrict special characters such as {}, (), <, >, ;, and '. However, the test team intercepted the HTTP request using a proxy tool, removed the validation, and inserted these characters directly into the request payload. The server accepted the input and the characters were successfully stored and later reflected in the frontend.

Risk Impact:
The attacker can bypass frontend controls to inject malicious input into the system. This input can be used for future exploitation, such as stored XSS, SQL injection, or breaking input-dependent logic, depending on how the application handles or reflects this data later.

Recommendations:
It is recommended to:
Implement strict server-side input validation and sanitization irrespective of any client-side validation.
Reject disallowed characters or enforce input constraints using backend validation libraries or middleware.
Normalize and encode user inputs when storing and reflecting data, particularly in dynamic HTML content.
Apply these validation controls throughout the application where user input is accepted, stored, or reflected, including forms, search boxes, profile fields, comments, etc.
CWE: CWE-20: Improper Input Validation
OWASP Top 10 2021 Mapping: A03:2021 – Injection
CVSS 3.1 Score: 3.7 (Low)
CVSS Vector: CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N
-----------------------------------
1. Issue Name: Missing Security Headers
Description:
The test team observed that several key security headers are not configured in the application's HTTP response.

Observation:
In the current scenario, the test team reviewed HTTP response headers and found the following headers missing:
Content-Security-Policy
X-Content-Type-Options
Referrer-Policy
Permissions-Policy
Cookie attribute SameSite
These headers play a significant role in reducing the attack surface against cross-site scripting (XSS), clickjacking, MIME sniffing, and data leakage.

Risk Impact:
The attacker can exploit the absence of these headers to perform attacks such as clickjacking, MIME-based attacks, data exfiltration via referrer leakage, or script injection if other vulnerabilities are present.

Severity: Low
Recommendations:
It is recommended to:
Set the Content-Security-Policy header to restrict the sources from which scripts, images, and other content can be loaded.
Example: Content-Security-Policy: default-src 'self'; script-src 'self';
Set X-Content-Type-Options: nosniff to prevent MIME-type sniffing.
Set Referrer-Policy: no-referrer or strict-origin-when-cross-origin to control referrer data exposure.
Set Permissions-Policy to limit access to browser features (e.g., camera, location).
Set the SameSite attribute for cookies to Strict or Lax to protect against CSRF.
Apply these configurations across all HTTP responses and reverse proxies (e.g., NGINX, Apache, load balancers).

OWASP Top 10 2021 Mapping: A05:2021 – Security Misconfiguration
CVSS 3.1 Score: 3.0 (Low)
CVSS Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N

CWE: CWE-693: Protection Mechanism Failure
